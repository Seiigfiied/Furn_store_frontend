{"ast":null,"code":"import { map, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./_services/product.service\";\nimport * as i2 from \"./image-processing.service\";\nexport class ProductResolveService {\n  constructor(productService, imageProcessingService) {\n    this.productService = productService;\n    this.imageProcessingService = imageProcessingService;\n  }\n  resolve(route, state) {\n    const id = route.paramMap.get('productId');\n    if (id) {\n      //fetch details from backend\n      return this.productService.getProductDetailsById(id).pipe(map(p => this.imageProcessingService.createImages(p)));\n    } else {\n      // return empty product observable\n      return of(this.getProductDetails());\n    }\n  }\n  getProductDetails() {\n    return {\n      productId: null,\n      productName: '',\n      productDescription: '',\n      productDiscountedPrice: 0,\n      productActualPrice: 0,\n      productImages: []\n    };\n  }\n}\nProductResolveService.ɵfac = function ProductResolveService_Factory(t) {\n  return new (t || ProductResolveService)(i0.ɵɵinject(i1.ProductService), i0.ɵɵinject(i2.ImageProcessingService));\n};\nProductResolveService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductResolveService,\n  factory: ProductResolveService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAOA,SAAqBA,GAAG,EAAEC,EAAE,QAAQ,MAAM;;;;AAO1C,OAAM,MAAOC,qBAAqB;EAChCC,YACUC,cAA8B,EAC9BC,sBAA8C;IAD9C,mBAAc,GAAdD,cAAc;IACd,2BAAsB,GAAtBC,sBAAsB;EAC7B;EACHC,OAAO,CACLC,KAA6B,EAC7BC,KAA0B;IAE1B,MAAMC,EAAE,GAAGF,KAAK,CAACG,QAAQ,CAACC,GAAG,CAAC,WAAW,CAAC;IAE1C,IAAIF,EAAE,EAAE;MACN;MACA,OAAO,IAAI,CAACL,cAAc,CACvBQ,qBAAqB,CAACH,EAAE,CAAC,CACzBI,IAAI,CAACb,GAAG,CAAEc,CAAC,IAAK,IAAI,CAACT,sBAAsB,CAACU,YAAY,CAACD,CAAC,CAAC,CAAC,CAAC;KACjE,MAAM;MACL;MACA,OAAOb,EAAE,CAAC,IAAI,CAACe,iBAAiB,EAAE,CAAC;;EAEvC;EAEAA,iBAAiB;IACf,OAAO;MACLC,SAAS,EAAE,IAAI;MACfC,WAAW,EAAE,EAAE;MACfC,kBAAkB,EAAE,EAAE;MACtBC,sBAAsB,EAAE,CAAC;MACzBC,kBAAkB,EAAE,CAAC;MACrBC,aAAa,EAAE;KAChB;EACH;;AA/BWpB,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;SAArBA,qBAAqB;EAAAqB,SAArBrB,qBAAqB;EAAAsB,YAFpB;AAAM","names":["map","of","ProductResolveService","constructor","productService","imageProcessingService","resolve","route","state","id","paramMap","get","getProductDetailsById","pipe","p","createImages","getProductDetails","productId","productName","productDescription","productDiscountedPrice","productActualPrice","productImages","factory","providedIn"],"sourceRoot":"","sources":["C:\\hit\\Git\\Course-work.-Construction-materials-store-FRONT-end\\src\\app\\product-resolve.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  ActivatedRouteSnapshot,\r\n  Resolve,\r\n  RouterStateSnapshot,\r\n} from '@angular/router';\r\nimport { Product } from './_model/product.model';\r\nimport { Observable, map, of } from 'rxjs';\r\nimport { ProductService } from './_services/product.service';\r\nimport { ImageProcessingService } from './image-processing.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProductResolveService implements Resolve<Product> {\r\n  constructor(\r\n    private productService: ProductService,\r\n    private imageProcessingService: ImageProcessingService\r\n  ) {}\r\n  resolve(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<Product> {\r\n    const id = route.paramMap.get('productId');\r\n\r\n    if (id) {\r\n      //fetch details from backend\r\n      return this.productService\r\n        .getProductDetailsById(id)\r\n        .pipe(map((p) => this.imageProcessingService.createImages(p)));\r\n    } else {\r\n      // return empty product observable\r\n      return of(this.getProductDetails());\r\n    }\r\n  }\r\n\r\n  getProductDetails() {\r\n    return {\r\n      productId: null,\r\n      productName: '',\r\n      productDescription: '',\r\n      productDiscountedPrice: 0,\r\n      productActualPrice: 0,\r\n      productImages: [],\r\n    };\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}