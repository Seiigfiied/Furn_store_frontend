{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/user-auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../_services/user.service\";\nexport class AuthGuard {\n  constructor(userAuthService, router, userService) {\n    this.userAuthService = userAuthService;\n    this.router = router;\n    this.userService = userService;\n  }\n  canActivate(route, state) {\n    if (this.userAuthService.getToken() !== null) {\n      const role = route.data['roles'];\n      if (role) {\n        const match = this.userService.roleMatch(role);\n        if (match) {\n          return true;\n        } else {\n          this.router.navigate(['/forbidden']);\n          return false;\n        }\n      }\n    }\n    this.router.navigate(['/login']);\n    return false;\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.UserAuthService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.UserService));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;AAeA,OAAM,MAAOA,SAAS;EACpBC,YACUC,eAAgC,EAChCC,MAAc,EACdC,WAAwB;IAFxB,oBAAe,GAAfF,eAAe;IACf,WAAM,GAANC,MAAM;IACN,gBAAW,GAAXC,WAAW;EAClB;EACHC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAM1B,IAAI,IAAI,CAACL,eAAe,CAACM,QAAQ,EAAE,KAAK,IAAI,EAAE;MAC5C,MAAMC,IAAI,GAAGH,KAAK,CAACI,IAAI,CAAC,OAAO,CAAkB;MAEjD,IAAID,IAAI,EAAE;QACR,MAAME,KAAK,GAAG,IAAI,CAACP,WAAW,CAACQ,SAAS,CAACH,IAAI,CAAC;QAE9C,IAAIE,KAAK,EAAE;UACT,OAAO,IAAI;SACZ,MAAM;UACL,IAAI,CAACR,MAAM,CAACU,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;UACpC,OAAO,KAAK;;;;IAKlB,IAAI,CAACV,MAAM,CAACU,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAChC,OAAO,KAAK;EACd;;AA/BWb,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAc,SAATd,SAAS;EAAAe,YAFR;AAAM","names":["AuthGuard","constructor","userAuthService","router","userService","canActivate","route","state","getToken","role","data","match","roleMatch","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\hit\\Git\\Course_work\\src\\app\\_auth\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  ActivatedRouteSnapshot,\r\n  CanActivate,\r\n  Router,\r\n  RouterStateSnapshot,\r\n  UrlTree,\r\n} from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { UserAuthService } from '../_services/user-auth.service';\r\nimport { UserService } from '../_services/user.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(\r\n    private userAuthService: UserAuthService,\r\n    private router: Router,\r\n    private userService: UserService\r\n  ) {}\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ):\r\n    | Observable<boolean | UrlTree>\r\n    | Promise<boolean | UrlTree>\r\n    | boolean\r\n    | UrlTree {\r\n    if (this.userAuthService.getToken() !== null) {\r\n      const role = route.data['roles'] as Array<string>;\r\n\r\n      if (role) {\r\n        const match = this.userService.roleMatch(role);\r\n\r\n        if (match) {\r\n          return true;\r\n        } else {\r\n          this.router.navigate(['/forbidden']);\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.router.navigate(['/login']);\r\n    return false;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}