{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/user-auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthInterceptor {\n  constructor(userAuthService, router) {\n    this.userAuthService = userAuthService;\n    this.router = router;\n  }\n  intercept(req, next) {\n    if (req.headers.get('No-Auth') === 'True') {\n      return next.handle(req.clone());\n    }\n    const token = this.userAuthService.getToken();\n    if (token) {\n      req = this.addToken(req, token);\n    }\n    return next.handle(req).pipe(catchError(err => {\n      console.log(err.status);\n      if (err.status === 401) {\n        this.router.navigate(['/login']);\n      } else if (err.status === 403) {\n        this.router.navigate(['/forbidden']);\n      }\n      return throwError('Something is wrong');\n    }));\n  }\n  addToken(request, token) {\n    return request.clone({\n      setHeaders: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)(i0.ɵɵinject(i1.UserAuthService), i0.ɵɵinject(i2.Router));\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAOA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;;AAM3C,OAAM,MAAOC,eAAe;EAC1BC,YACUC,eAAgC,EAChCC,MAAc;IADd,oBAAe,GAAfD,eAAe;IACf,WAAM,GAANC,MAAM;EACb;EACHC,SAAS,CACPC,GAAqB,EACrBC,IAAiB;IAEjB,IAAID,GAAG,CAACE,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC,KAAK,MAAM,EAAE;MACzC,OAAOF,IAAI,CAACG,MAAM,CAACJ,GAAG,CAACK,KAAK,EAAE,CAAC;;IAGjC,MAAMC,KAAK,GAAG,IAAI,CAACT,eAAe,CAACU,QAAQ,EAAE;IAE7C,IAAID,KAAK,EAAE;MACTN,GAAG,GAAG,IAAI,CAACQ,QAAQ,CAACR,GAAG,EAAEM,KAAK,CAAC;;IAGjC,OAAOL,IAAI,CAACG,MAAM,CAACJ,GAAG,CAAC,CAACS,IAAI,CAC1Bf,UAAU,CAAEgB,GAAsB,IAAI;MACpCC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,MAAM,CAAC;MACvB,IAAIH,GAAG,CAACG,MAAM,KAAK,GAAG,EAAE;QACtB,IAAI,CAACf,MAAM,CAACgB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;OACjC,MAAM,IAAIJ,GAAG,CAACG,MAAM,KAAK,GAAG,EAAE;QAC7B,IAAI,CAACf,MAAM,CAACgB,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;;MAEtC,OAAOrB,UAAU,CAAC,oBAAoB,CAAC;IACzC,CAAC,CAAC,CACH;EACH;EAEQe,QAAQ,CAACO,OAAyB,EAAET,KAAa;IACvD,OAAOS,OAAO,CAACV,KAAK,CAAC;MACnBW,UAAU,EAAE;QACVC,aAAa,EAAE,UAAUX,KAAK;;KAEjC,CAAC;EACJ;;AAtCWX,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAuB,SAAfvB,eAAe;AAAA","names":["throwError","catchError","AuthInterceptor","constructor","userAuthService","router","intercept","req","next","headers","get","handle","clone","token","getToken","addToken","pipe","err","console","log","status","navigate","request","setHeaders","Authorization","factory"],"sourceRoot":"","sources":["C:\\hit\\Git\\Course-work.-Construction-materials-store-FRONT-end\\src\\app\\_auth\\auth.interceptor.ts"],"sourcesContent":["import {\r\n  HttpErrorResponse,\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { UserAuthService } from '../_services/user-auth.service';\r\nimport { Router } from '@angular/router';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  constructor(\r\n    private userAuthService: UserAuthService,\r\n    private router: Router\r\n  ) {}\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    if (req.headers.get('No-Auth') === 'True') {\r\n      return next.handle(req.clone());\r\n    }\r\n\r\n    const token = this.userAuthService.getToken();\r\n\r\n    if (token) {\r\n      req = this.addToken(req, token);\r\n    }\r\n\r\n    return next.handle(req).pipe(\r\n      catchError((err: HttpErrorResponse) => {\r\n        console.log(err.status);\r\n        if (err.status === 401) {\r\n          this.router.navigate(['/login']);\r\n        } else if (err.status === 403) {\r\n          this.router.navigate(['/forbidden']);\r\n        }\r\n        return throwError('Something is wrong');\r\n      })\r\n    );\r\n  }\r\n\r\n  private addToken(request: HttpRequest<any>, token: string) {\r\n    return request.clone({\r\n      setHeaders: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}