{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nexport class DragDirective {\n  constructor(sanitizer) {\n    this.sanitizer = sanitizer;\n    this.files = new EventEmitter();\n    this.background = '#eee';\n  }\n  onDragOver(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.background = '#999';\n  }\n  onDragLeave(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.background = '#eee';\n  }\n  onDrop(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.background = '#eee';\n    let fileHandle;\n    const file = event.dataTransfer.files[0];\n    const url = this.sanitizer.bypassSecurityTrustUrl(window.URL.createObjectURL(file));\n    fileHandle = {\n      file,\n      url\n    };\n    this.files.emit(fileHandle);\n  }\n}\nDragDirective.ɵfac = function DragDirective_Factory(t) {\n  return new (t || DragDirective)(i0.ɵɵdirectiveInject(i1.DomSanitizer));\n};\nDragDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: DragDirective,\n  selectors: [[\"\", \"appDrag\", \"\"]],\n  hostVars: 2,\n  hostBindings: function DragDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"dragover\", function DragDirective_dragover_HostBindingHandler($event) {\n        return ctx.onDragOver($event);\n      })(\"dragleave\", function DragDirective_dragleave_HostBindingHandler($event) {\n        return ctx.onDragLeave($event);\n      })(\"drop\", function DragDirective_drop_HostBindingHandler($event) {\n        return ctx.onDrop($event);\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"background\", ctx.background);\n    }\n  },\n  outputs: {\n    files: \"files\"\n  }\n});","map":{"version":3,"mappings":"AAAA,SAEEA,YAAY,QAIP,eAAe;;;AAOtB,OAAM,MAAOC,aAAa;EAOxBC,YAAoBC,SAAuB;IAAvB,cAAS,GAATA,SAAS;IAL7B,UAAK,GAA6B,IAAIH,YAAY,EAAE;IAG5C,eAAU,GAAG,MAAM;EAEmB;EAGvCI,UAAU,CAACC,KAAgB;IAChCA,KAAK,CAACC,cAAc,EAAE;IAEtBD,KAAK,CAACE,eAAe,EAAE;IAEvB,IAAI,CAACC,UAAU,GAAG,MAAM;EAC1B;EAGOC,WAAW,CAACJ,KAAgB;IACjCA,KAAK,CAACC,cAAc,EAAE;IAEtBD,KAAK,CAACE,eAAe,EAAE;IAEvB,IAAI,CAACC,UAAU,GAAG,MAAM;EAC1B;EAGOE,MAAM,CAACL,KAAgB;IAC5BA,KAAK,CAACC,cAAc,EAAE;IAEtBD,KAAK,CAACE,eAAe,EAAE;IAEvB,IAAI,CAACC,UAAU,GAAG,MAAM;IAExB,IAAIG,UAAsB;IAE1B,MAAMC,IAAI,GAAGP,KAAK,CAACQ,YAAa,CAACC,KAAK,CAAC,CAAC,CAAC;IAEzC,MAAMC,GAAG,GAAG,IAAI,CAACZ,SAAS,CAACa,sBAAsB,CAC/CC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACP,IAAI,CAAC,CACjC;IAEDD,UAAU,GAAG;MAAEC,IAAI;MAAEG;IAAG,CAAE;IAE1B,IAAI,CAACD,KAAK,CAACM,IAAI,CAACT,UAAU,CAAC;EAC7B;;AA9CWV,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;QAAbA,aAAa;EAAAoB;EAAAC;EAAAC;IAAA;;eAAbC,sBACZ;MAAA;QAAA,OADYA,uBACX;MAAA;QAAA,OADWA,kBAAc;MAAA","names":["EventEmitter","DragDirective","constructor","sanitizer","onDragOver","event","preventDefault","stopPropagation","background","onDragLeave","onDrop","fileHandle","file","dataTransfer","files","url","bypassSecurityTrustUrl","window","URL","createObjectURL","emit","selectors","hostVars","hostBindings","ctx"],"sourceRoot":"","sources":["C:\\hit\\Git\\Course_work\\src\\app\\drag.directive.ts"],"sourcesContent":["import {\r\n  Directive,\r\n  EventEmitter,\r\n  HostBinding,\r\n  HostListener,\r\n  Output,\r\n} from '@angular/core';\r\nimport { FileHandle } from './_model/file-handle.model';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Directive({\r\n  selector: '[appDrag]',\r\n})\r\nexport class DragDirective {\r\n  @Output()\r\n  files: EventEmitter<FileHandle> = new EventEmitter();\r\n\r\n  @HostBinding('style.background')\r\n  private background = '#eee';\r\n\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n\r\n  @HostListener('dragover', ['$event'])\r\n  public onDragOver(event: DragEvent) {\r\n    event.preventDefault();\r\n\r\n    event.stopPropagation();\r\n\r\n    this.background = '#999';\r\n  }\r\n\r\n  @HostListener('dragleave', ['$event'])\r\n  public onDragLeave(event: DragEvent) {\r\n    event.preventDefault();\r\n\r\n    event.stopPropagation();\r\n\r\n    this.background = '#eee';\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  public onDrop(event: DragEvent) {\r\n    event.preventDefault();\r\n\r\n    event.stopPropagation();\r\n\r\n    this.background = '#eee';\r\n\r\n    let fileHandle: FileHandle;\r\n\r\n    const file = event.dataTransfer!.files[0];\r\n\r\n    const url = this.sanitizer.bypassSecurityTrustUrl(\r\n      window.URL.createObjectURL(file)\r\n    );\r\n\r\n    fileHandle = { file, url };\r\n\r\n    this.files.emit(fileHandle);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}