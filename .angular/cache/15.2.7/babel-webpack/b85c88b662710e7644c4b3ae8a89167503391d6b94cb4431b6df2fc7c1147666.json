{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nexport class ImageProcessingService {\n  constructor(sanitizer) {\n    this.sanitizer = sanitizer;\n  }\n  createImages(product) {\n    const productImages = product.productImages;\n    const productImagesToFileHandle = [];\n    for (let i = 0; i < productImages.length; i++) {\n      const imageFileData = productImages[i];\n      const imageBlob = this.dataURItoBlob(imageFileData.picByte, imageFileData.type);\n      const imageFile = new File([imageBlob], imageFileData.name, {\n        type: imageFileData.type\n      });\n      const finalFileHandle = {\n        file: imageFile,\n        url: this.sanitizer.bypassSecurityTrustUrl(window.URL.createObjectURL(imageFile))\n      };\n      productImagesToFileHandle.push(finalFileHandle);\n    }\n    product.productImages = productImagesToFileHandle;\n    return product;\n  }\n  dataURItoBlob(picBytes, imageType) {\n    const byteString = window.atob(picBytes);\n    const arrayBuffer = new ArrayBuffer(byteString.length);\n    const int8Array = new Uint8Array(arrayBuffer);\n    for (let i = 0; i < byteString.length; i++) {\n      int8Array[i] = byteString.charCodeAt(i);\n    }\n    const blob = new Blob([int8Array], {\n      type: imageType\n    });\n    return blob;\n  }\n}\nImageProcessingService.ɵfac = function ImageProcessingService_Factory(t) {\n  return new (t || ImageProcessingService)(i0.ɵɵinject(i1.DomSanitizer));\n};\nImageProcessingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ImageProcessingService,\n  factory: ImageProcessingService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,sBAAsB;EACjCC,YAAoBC,SAAuB;IAAvB,cAAS,GAATA,SAAS;EAAiB;EAEvCC,YAAY,CAACC,OAAgB;IAClC,MAAMC,aAAa,GAAUD,OAAO,CAACC,aAAa;IAElD,MAAMC,yBAAyB,GAAiB,EAAE;IAElD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,aAAa,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MAC7C,MAAME,aAAa,GAAGJ,aAAa,CAACE,CAAC,CAAC;MAEtC,MAAMG,SAAS,GAAG,IAAI,CAACC,aAAa,CAClCF,aAAa,CAACG,OAAO,EACrBH,aAAa,CAACI,IAAI,CACnB;MAED,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAACL,SAAS,CAAC,EAAED,aAAa,CAACO,IAAI,EAAE;QAC1DH,IAAI,EAAEJ,aAAa,CAACI;OACrB,CAAC;MAEF,MAAMI,eAAe,GAAe;QAClCC,IAAI,EAAEJ,SAAS;QACfK,GAAG,EAAE,IAAI,CAACjB,SAAS,CAACkB,sBAAsB,CACxCC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACT,SAAS,CAAC;OAExC;MAEDR,yBAAyB,CAACkB,IAAI,CAACP,eAAe,CAAC;;IAGjDb,OAAO,CAACC,aAAa,GAAGC,yBAAyB;IAEjD,OAAOF,OAAO;EAChB;EAEOO,aAAa,CAACc,QAAa,EAAEC,SAAc;IAChD,MAAMC,UAAU,GAAGN,MAAM,CAACO,IAAI,CAACH,QAAQ,CAAC;IAExC,MAAMI,WAAW,GAAG,IAAIC,WAAW,CAACH,UAAU,CAACnB,MAAM,CAAC;IAEtD,MAAMuB,SAAS,GAAG,IAAIC,UAAU,CAACH,WAAW,CAAC;IAE7C,KAAK,IAAItB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoB,UAAU,CAACnB,MAAM,EAAED,CAAC,EAAE,EAAE;MAC1CwB,SAAS,CAACxB,CAAC,CAAC,GAAGoB,UAAU,CAACM,UAAU,CAAC1B,CAAC,CAAC;;IAGzC,MAAM2B,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACJ,SAAS,CAAC,EAAE;MAAElB,IAAI,EAAEa;IAAS,CAAE,CAAC;IAEvD,OAAOQ,IAAI;EACb;;AAjDWlC,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAoC,SAAtBpC,sBAAsB;EAAAqC,YAFrB;AAAM","names":["ImageProcessingService","constructor","sanitizer","createImages","product","productImages","productImagesToFileHandle","i","length","imageFileData","imageBlob","dataURItoBlob","picByte","type","imageFile","File","name","finalFileHandle","file","url","bypassSecurityTrustUrl","window","URL","createObjectURL","push","picBytes","imageType","byteString","atob","arrayBuffer","ArrayBuffer","int8Array","Uint8Array","charCodeAt","blob","Blob","factory","providedIn"],"sourceRoot":"","sources":["C:\\hit\\Git\\Course_work\\src\\app\\image-processing.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Product } from './_model/product.model';\r\nimport { FileHandle } from './_model/file-handle.model';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ImageProcessingService {\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n\r\n  public createImages(product: Product) {\r\n    const productImages: any[] = product.productImages;\r\n\r\n    const productImagesToFileHandle: FileHandle[] = [];\r\n\r\n    for (let i = 0; i < productImages.length; i++) {\r\n      const imageFileData = productImages[i];\r\n\r\n      const imageBlob = this.dataURItoBlob(\r\n        imageFileData.picByte,\r\n        imageFileData.type\r\n      );\r\n\r\n      const imageFile = new File([imageBlob], imageFileData.name, {\r\n        type: imageFileData.type,\r\n      });\r\n\r\n      const finalFileHandle: FileHandle = {\r\n        file: imageFile,\r\n        url: this.sanitizer.bypassSecurityTrustUrl(\r\n          window.URL.createObjectURL(imageFile)\r\n        ),\r\n      };\r\n\r\n      productImagesToFileHandle.push(finalFileHandle);\r\n    }\r\n\r\n    product.productImages = productImagesToFileHandle;\r\n\r\n    return product;\r\n  }\r\n\r\n  public dataURItoBlob(picBytes: any, imageType: any) {\r\n    const byteString = window.atob(picBytes);\r\n\r\n    const arrayBuffer = new ArrayBuffer(byteString.length);\r\n\r\n    const int8Array = new Uint8Array(arrayBuffer);\r\n\r\n    for (let i = 0; i < byteString.length; i++) {\r\n      int8Array[i] = byteString.charCodeAt(i);\r\n    }\r\n\r\n    const blob = new Blob([int8Array], { type: imageType });\r\n\r\n    return blob;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}