{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../_services/user-auth.service\";\nexport class UserService {\n  constructor(httpclient, userAuthService) {\n    this.httpclient = httpclient;\n    this.userAuthService = userAuthService;\n    this.PATH_OF_API = 'http://localhost:9090';\n    this.requestHeader = new HttpHeaders({\n      'No-Auth': 'True'\n    });\n  }\n  register(registerData) {\n    return this.httpclient.post(this.PATH_OF_API + '/registerNewUser', registerData);\n  }\n  login(loginData) {\n    return this.httpclient.post(this.PATH_OF_API + '/authenticate', loginData, {\n      headers: this.requestHeader\n    });\n  }\n  forUser() {\n    return this.httpclient.get(this.PATH_OF_API + '/forUser', {\n      responseType: 'text'\n    });\n  }\n  forAdmin() {\n    return this.httpclient.get(this.PATH_OF_API + '/forAdmin', {\n      responseType: 'text'\n    });\n  }\n  roleMatch(allowedRoles) {\n    let isMatch = false;\n    const userRoles = this.userAuthService.getRoles();\n    if (userRoles != null && userRoles) {\n      for (let i = 0; i < userRoles.length; i++) {\n        for (let j = 0; j < allowedRoles.length; j++) {\n          if (userRoles[i].roleName === allowedRoles[j]) {\n            isMatch = true;\n            return isMatch;\n          } else {\n            return isMatch;\n          }\n        }\n      }\n    }\n    return isMatch;\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserAuthService));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;;AAO9D,OAAM,MAAOC,WAAW;EAKtBC,YACUC,UAAsB,EACtBC,eAAgC;IADhC,eAAU,GAAVD,UAAU;IACV,oBAAe,GAAfC,eAAe;IANzB,gBAAW,GAAG,uBAAuB;IAErC,kBAAa,GAAG,IAAIJ,WAAW,CAAC;MAAE,SAAS,EAAE;IAAM,CAAE,CAAC;EAKnD;EAEIK,QAAQ,CAACC,YAAiB;IAC/B,OAAO,IAAI,CAACH,UAAU,CAACI,IAAI,CACzB,IAAI,CAACC,WAAW,GAAG,kBAAkB,EACrCF,YAAY,CACb;EACH;EAEOG,KAAK,CAACC,SAAc;IACzB,OAAO,IAAI,CAACP,UAAU,CAACI,IAAI,CAAC,IAAI,CAACC,WAAW,GAAG,eAAe,EAAEE,SAAS,EAAE;MACzEC,OAAO,EAAE,IAAI,CAACC;KACf,CAAC;EACJ;EAEOC,OAAO;IACZ,OAAO,IAAI,CAACV,UAAU,CAACW,GAAG,CAAC,IAAI,CAACN,WAAW,GAAG,UAAU,EAAE;MACxDO,YAAY,EAAE;KACf,CAAC;EACJ;EAEOC,QAAQ;IACb,OAAO,IAAI,CAACb,UAAU,CAACW,GAAG,CAAC,IAAI,CAACN,WAAW,GAAG,WAAW,EAAE;MACzDO,YAAY,EAAE;KACf,CAAC;EACJ;EAEOE,SAAS,CAACC,YAAiB;IAChC,IAAIC,OAAO,GAAG,KAAK;IAEnB,MAAMC,SAAS,GAAQ,IAAI,CAAChB,eAAe,CAACiB,QAAQ,EAAE;IAEtD,IAAID,SAAS,IAAI,IAAI,IAAIA,SAAS,EAAE;MAClC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;QACzC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,YAAY,CAACK,MAAM,EAAEC,CAAC,EAAE,EAAE;UAC5C,IAAIJ,SAAS,CAACE,CAAC,CAAC,CAACG,QAAQ,KAAKP,YAAY,CAACM,CAAC,CAAC,EAAE;YAC7CL,OAAO,GAAG,IAAI;YACd,OAAOA,OAAO;WACf,MAAM;YACL,OAAOA,OAAO;;;;;IAKtB,OAAOA,OAAO;EAChB;;AArDWlB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAyB,SAAXzB,WAAW;EAAA0B,YAFV;AAAM","names":["HttpHeaders","UserService","constructor","httpclient","userAuthService","register","registerData","post","PATH_OF_API","login","loginData","headers","requestHeader","forUser","get","responseType","forAdmin","roleMatch","allowedRoles","isMatch","userRoles","getRoles","i","length","j","roleName","factory","providedIn"],"sourceRoot":"","sources":["C:\\hit\\Git\\Course-work.-Construction-materials-store-FRONT-end\\src\\app\\_services\\user.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { UserAuthService } from '../_services/user-auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserService {\r\n  PATH_OF_API = 'http://localhost:9090';\r\n\r\n  requestHeader = new HttpHeaders({ 'No-Auth': 'True' });\r\n\r\n  constructor(\r\n    private httpclient: HttpClient,\r\n    private userAuthService: UserAuthService\r\n  ) {}\r\n\r\n  public register(registerData: any) {\r\n    return this.httpclient.post(\r\n      this.PATH_OF_API + '/registerNewUser',\r\n      registerData\r\n    );\r\n  }\r\n\r\n  public login(loginData: any) {\r\n    return this.httpclient.post(this.PATH_OF_API + '/authenticate', loginData, {\r\n      headers: this.requestHeader,\r\n    });\r\n  }\r\n\r\n  public forUser() {\r\n    return this.httpclient.get(this.PATH_OF_API + '/forUser', {\r\n      responseType: 'text',\r\n    });\r\n  }\r\n\r\n  public forAdmin() {\r\n    return this.httpclient.get(this.PATH_OF_API + '/forAdmin', {\r\n      responseType: 'text',\r\n    });\r\n  }\r\n\r\n  public roleMatch(allowedRoles: any): boolean {\r\n    let isMatch = false;\r\n\r\n    const userRoles: any = this.userAuthService.getRoles();\r\n\r\n    if (userRoles != null && userRoles) {\r\n      for (let i = 0; i < userRoles.length; i++) {\r\n        for (let j = 0; j < allowedRoles.length; j++) {\r\n          if (userRoles[i].roleName === allowedRoles[j]) {\r\n            isMatch = true;\r\n            return isMatch;\r\n          } else {\r\n            return isMatch;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return isMatch;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}